# These models were are auto-generated by using a modified Django's inspectdb script
# The only required manual changes (as of 26.july 2017) is to
# 1. add related_name attribute to the class Pedigree
# 2 add primary_key=True to some classes (replace unique=True)
# Like this:
# germplasmDbId = models.ForeignKey('Germplasm', related_name='pedigreeObject')
# parent1Id = models.ForeignKey('Germplasm', related_name='pedigreeChild1')
# parent2Id = models.ForeignKey('Germplasm', related_name='pedigreeChild2')
#
# class GermplasmAttribute(models.Model):
#     attributeDbId = models.TextField(primary_key=True, verbose_name=' attributeDbId')
#     ...


from __future__ import unicode_literals

from django.db import models


class Contact(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    contactDbId = models.TextField(primary_key=True, verbose_name=' contactDbId')
    name = models.TextField(blank=True, verbose_name=' name')
    email = models.TextField(blank=True, verbose_name=' email')
    type = models.TextField(blank=True, verbose_name=' type')
    orcid = models.TextField(blank=True, verbose_name=' orcid')
    instituteName = models.TextField(blank=True, verbose_name=' instituteName')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.name)


class Crop(models.Model):
    cropDbId = models.TextField(primary_key=True, verbose_name=' cropDbId')
    commonName = models.TextField(verbose_name=' commonName')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.commonName)


class Donor(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    germplasmDbId = models.ForeignKey('Germplasm', verbose_name=' germplasmDbId')
    donorAccessionNumber = models.TextField(blank=True, verbose_name=' donorAccessionNumber')
    donorInstituteCode = models.TextField(blank=True, verbose_name=' donorInstituteCode')
    donorGermplasmPUI = models.TextField(blank=True, verbose_name=' donorGermplasmPUI')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.donorAccessionNumber)


class Germplasm(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    germplasmDbId = models.TextField(primary_key=True, verbose_name=' germplasmDbId')
    germplasmPUI = models.TextField(blank=True, verbose_name=' germplasmPUI')
    germplasmName = models.TextField(verbose_name=' germplasmName')
    defaultDisplayName = models.TextField(verbose_name=' defaultDisplayName')
    accessionNumber = models.TextField(blank=True, verbose_name=' accessionNumber')
    pedigree = models.TextField(blank=True, verbose_name=' pedigree')
    seedSource = models.TextField(blank=True, verbose_name=' seedSource')
    synonyms = models.TextField(blank=True, verbose_name=' synonyms')
    instituteCode = models.TextField(verbose_name=' instituteCode')
    instituteName = models.TextField(blank=True, verbose_name=' instituteName')
    biologicalStatusOfAccessionCode = models.TextField(blank=True, verbose_name=' biologicalStatusOfAccessionCode')
    countryOfOriginCode = models.TextField(blank=True, verbose_name=' countryOfOriginCode')
    typeOfGermplasmStorageCode = models.TextField(blank=True, verbose_name=' typeOfGermplasmStorageCode')
    genus = models.TextField(blank=True, verbose_name=' genus')
    species = models.TextField(blank=True, verbose_name=' species')
    speciesAuthority = models.TextField(blank=True, verbose_name=' speciesAuthority')
    subtaxa = models.TextField(blank=True, verbose_name=' subtaxa')
    subtaxaAuthority = models.TextField(blank=True, verbose_name=' subtaxaAuthority')
    acquisitionDate = models.TextField(blank=True, verbose_name=' acquisitionDate')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.germplasmName)

    class Meta:
        verbose_name_plural = 'Germplasm'


class GermplasmAttribute(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    attributeCategoryDbId = models.ForeignKey('GermplasmAttributeCategory', verbose_name=' attributeCategoryDbId')
    attributeDbId = models.TextField(primary_key=True, verbose_name=' attributeDbId')
    code = models.TextField(blank=True, verbose_name=' code')
    uri = models.TextField(blank=True, verbose_name=' uri')
    name = models.TextField(verbose_name=' name')
    description = models.TextField(blank=True, verbose_name=' description')
    datatype = models.TextField(blank=True, verbose_name=' datatype')
    values = models.TextField(blank=True, verbose_name=' values')  # This field type is a guess.

    def __str__(self):
        return '{}: {}'.format(self.pk, self.name)


class GermplasmAttributeCategory(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    attributeCategoryDbId = models.TextField(primary_key=True, verbose_name=' attributeCategoryDbId')
    attributeCategoryName = models.TextField(blank=True, verbose_name=' attributeCategoryName')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.attributeCategoryName)

    class Meta:
        verbose_name_plural = 'GermplasmAttributeCategories'


class GermplasmAttributeValue(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    germplasmDbId = models.ForeignKey('Germplasm', verbose_name=' germplasmDbId')
    attributeDbId = models.ForeignKey('GermplasmAttribute', verbose_name=' attributeDbId')
    determinedDate = models.TextField(blank=True, verbose_name=' determinedDate')
    value = models.TextField(verbose_name=' value')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.value)


class Location(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    locationDbId = models.TextField(primary_key=True, verbose_name=' locationDbId')
    type = models.TextField(blank=True, verbose_name=' type')
    name = models.TextField(blank=True, verbose_name=' name')
    abbreviation = models.TextField(blank=True, verbose_name=' abbreviation')
    countryCode = models.TextField(blank=True, verbose_name=' countryCode')
    countryName = models.TextField(blank=True, verbose_name=' countryName')
    latitude = models.TextField(blank=True, verbose_name=' latitude')  # This field type is a guess.
    longitude = models.TextField(blank=True, verbose_name=' longitude')  # This field type is a guess.
    altitude = models.TextField(blank=True, verbose_name=' altitude')  # This field type is a guess.
    instituteName = models.TextField(blank=True, verbose_name=' instituteName')
    instituteAddress = models.TextField(blank=True, verbose_name=' instituteAddress')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.name)


class LocationAdditionalInfo(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    locationDbId = models.ForeignKey('Location', verbose_name=' locationDbId')
    key = models.TextField(verbose_name=' key')
    value = models.TextField(verbose_name=' value')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.value[:15])

    class Meta:
        verbose_name_plural = 'LocationAdditionalInfo'


class Map(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    mapDbId = models.TextField(primary_key=True, verbose_name=' mapDbId')

    def __str__(self):
        return '{}'.format(self.pk)


class Marker(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    markerDbId = models.TextField(primary_key=True, verbose_name=' markerDbId')
    defaultDisplayName = models.TextField(blank=True, verbose_name=' defaultDisplayName')
    type = models.TextField(blank=True, verbose_name=' type')
    synonyms = models.TextField(blank=True, verbose_name=' synonyms')
    refAlt = models.TextField(blank=True, verbose_name=' refAlt')
    analysisMethods = models.TextField(blank=True, verbose_name=' analysisMethods')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.defaultDisplayName)


class Markerprofile(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    markerProfileDbId = models.TextField(primary_key=True, verbose_name=' markerProfileDbId')

    def __str__(self):
        return '{}'.format(self.pk)


class Method(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    methodDbId = models.TextField(primary_key=True, verbose_name=' methodDbId')

    def __str__(self):
        return '{}'.format(self.pk)


class Observation(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    observationUnitDbId = models.ForeignKey('ObservationUnit', verbose_name=' observationUnitDbId')
    observationVariableDbId = models.ForeignKey('ObservationVariable', verbose_name=' observationVariableDbId')
    observationTimeStamp = models.TextField(blank=True, verbose_name=' observationTimeStamp')
    observationDbId = models.TextField(primary_key=True, verbose_name=' observationDbId')
    seasonDbId = models.ForeignKey('Season', verbose_name=' seasonDbId')
    collector = models.TextField(blank=True, verbose_name=' collector')
    value = models.TextField(blank=True, verbose_name=' value')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.value[:15])


class ObservationUnit(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    studyDbId = models.ForeignKey('Study', verbose_name=' studyDbId')
    germplasmDbId = models.ForeignKey('Germplasm', verbose_name=' germplasmDbId')
    observationUnitDbId = models.TextField(primary_key=True, verbose_name=' observationUnitDbId')
    name = models.TextField(verbose_name=' name')
    observationLevel = models.TextField(blank=True, verbose_name=' observationUnitLevel')
    observationLevels = models.TextField(blank=True, verbose_name=' observationUnitLevels')
    entryNumber = models.TextField(blank=True, verbose_name=' entryNumber')
    entryType = models.TextField(blank=True, verbose_name=' entryType')
    plotNumber = models.TextField(blank=True, verbose_name=' plotNumber')
    blockNumber = models.TextField(blank=True, verbose_name=' blockNumber')
    plantNumber = models.TextField(blank=True, verbose_name=' plantNumber')
    x = models.TextField(blank=True, verbose_name=' x')
    y = models.TextField(blank=True, verbose_name=' y')
    replicate = models.TextField(blank=True, verbose_name=' replicate')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.name)


class Treatment(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    observationUnitDbId = models.ForeignKey('ObservationUnit', verbose_name=' observationUnitDbId')
    factor = models.TextField(verbose_name=' factor')
    modality = models.TextField(verbose_name=' modality')

    def __str__(self):
        return '{}'.format(self.pk)


class ObservationUnitXref(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    observationUnitDbId = models.ForeignKey('ObservationUnit', verbose_name=' observationUnitDbId')
    source = models.TextField(verbose_name=' source')
    id = models.TextField(primary_key=True, verbose_name=' id')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.source)


class ObservationVariable(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    ontologyDbId = models.ForeignKey('Ontology', verbose_name=' ontologyDbId')
    observationVariableDbId = models.TextField(primary_key=True, verbose_name=' observationVariableDbId')
    observationVariableName = models.TextField(blank=True, verbose_name=' observationVariableName')
    traitDbId = models.ForeignKey('Trait', verbose_name=' traitDbId')
    methodDbId = models.ForeignKey('Method', verbose_name=' methodDbId')
    scaleDbId = models.ForeignKey('Scale', verbose_name=' scaleDbId')

    def __str__(self):
        return '{}'.format(self.pk)


class Ontology(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    ontologyDbId = models.TextField(primary_key=True, verbose_name=' ontologyDbId')

    def __str__(self):
        return '{}'.format(self.pk)

    class Meta:
        verbose_name_plural = 'Ontologies'


class Pedigree(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    germplasmDbId = models.ForeignKey('Germplasm', verbose_name=' germplasmDbId', related_name='pedigreeObject')
    pedigree = models.TextField(verbose_name=' pedigree')
    parent1Id = models.ForeignKey('Germplasm', verbose_name=' parent1Id', related_name='pedigreeChild1')
    parent2Id = models.ForeignKey('Germplasm', verbose_name=' parent2Id', related_name='pedigreeChild2')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.pedigree[:15])


class Program(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    programDbId = models.TextField(primary_key=True, verbose_name=' programDbId')
    name = models.TextField(verbose_name=' name')
    abbreviation = models.TextField(blank=True, verbose_name=' abbreviation')
    objective = models.TextField(blank=True, verbose_name=' objective')
    leadPerson = models.TextField(blank=True, verbose_name=' leadPerson')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.name)


class Sample(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    sampleDbId = models.TextField(primary_key=True, verbose_name=' sampleDbId')

    def __str__(self):
        return '{}'.format(self.pk)


class Scale(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    scaleDbId = models.TextField(primary_key=True, verbose_name=' scaleDbId')

    def __str__(self):
        return '{}'.format(self.pk)


class Season(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    seasonDbId = models.TextField(primary_key=True, verbose_name=' seasonDbId')
    year = models.TextField(blank=True, verbose_name=' year')
    season = models.TextField(blank=True, verbose_name=' season')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.season[:15])


class Study(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    trialDbId = models.ForeignKey('Trial', verbose_name=' trialDbId')
    locationDbId = models.ForeignKey('Location', verbose_name=' locationDbId')
    studyType = models.ForeignKey('StudyType', verbose_name=' studyType')
    studyDbId = models.TextField(primary_key=True, verbose_name=' studyDbId')
    name = models.TextField(verbose_name=' name')
    description = models.TextField(blank=True, verbose_name=' description')
    startDate = models.TextField(blank=True, verbose_name=' startDate')
    endDate = models.TextField(blank=True, verbose_name=' endDate')
    active = models.NullBooleanField(verbose_name=' active')
    license = models.TextField(blank=True, verbose_name=' license')
    lastUpdateVersion = models.TextField(blank=True, verbose_name=' lastUpdateVersion')
    lastUpdateTimestamp = models.TextField(blank=True, verbose_name=' lastUpdateTimestamp')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.name)

    class Meta:
        verbose_name_plural = 'Studies'


class StudyAdditionalInfo(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    studyDbId = models.ForeignKey('Study', verbose_name=' studyDbId')
    key = models.TextField(verbose_name=' key')
    value = models.TextField(verbose_name=' value')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.value[:15])

    class Meta:
        verbose_name_plural = 'StudyAdditionalInfo'


class StudyContact(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    studyDbId = models.ForeignKey('Study', verbose_name=' studyDbId')
    contactDbId = models.ForeignKey('Contact', verbose_name=' contactDbId')

    def __str__(self):
        return '{}'.format(self.pk)


class StudyDataLink(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    studyDbId = models.ForeignKey('Study', verbose_name=' studyDbId')
    name = models.TextField(blank=True, verbose_name=' name')
    type = models.TextField(blank=True, verbose_name=' type')
    url = models.TextField(verbose_name=' url')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.name)


class StudySeason(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    studyDbId = models.ForeignKey('Study', verbose_name=' studyDbId')
    seasonDbId = models.ForeignKey('Season', verbose_name=' seasonDbId')

    def __str__(self):
        return '{}'.format(self.pk)


class StudyType(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    name = models.TextField(primary_key=True, verbose_name=' name')
    description = models.TextField(blank=True, verbose_name=' description')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.name)


class TaxonXref(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    taxonDbId = models.TextField(primary_key=True, verbose_name=' taxonDbId')
    source = models.TextField(verbose_name=' source')
    rank = models.TextField(blank=True, verbose_name=' rank')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.source)


class TaxonXrefGermplasm(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    taxonDbId = models.ForeignKey('TaxonXref', verbose_name=' taxonDbId')
    germplasmDbId = models.ForeignKey('Germplasm', verbose_name=' germplasmDbId')

    def __str__(self):
        return '{}'.format(self.pk)

    class Meta:
        verbose_name_plural = 'TaxonXrefGermplasm'


class Trait(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    traitDbId = models.TextField(primary_key=True, verbose_name=' traitDbId')

    def __str__(self):
        return '{}'.format(self.pk)


class Trial(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    programDbId = models.ForeignKey('Program', verbose_name=' programDbId')
    trialDbId = models.TextField(primary_key=True, verbose_name=' trialDbId')
    name = models.TextField(verbose_name=' name')
    startDate = models.TextField(blank=True, verbose_name=' startDate')
    endDate = models.TextField(blank=True, verbose_name=' endDate')
    active = models.NullBooleanField(verbose_name=' active')
    datasetAuthorshipLicence = models.TextField(blank=True, verbose_name=' datasetAuthorshipLicence')
    datasetAuthorshipDatasetPUI = models.TextField(blank=True, verbose_name=' datasetAuthorshipDatasetPUI')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.name)


class TrialAdditionalInfo(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    trialDbId = models.ForeignKey('Trial', verbose_name=' trialDbId')
    key = models.TextField(verbose_name=' key')
    value = models.TextField(verbose_name=' value')

    def __str__(self):
        return '{}: {}'.format(self.pk, self.value[:15])

    class Meta:
        verbose_name_plural = 'TrialAdditionalInfo'


class TrialContact(models.Model):
    cropDbId = models.ForeignKey('Crop', verbose_name=' cropDbId')
    trialDbId = models.ForeignKey('Trial', verbose_name=' trialDbId')
    contactDbId = models.ForeignKey('Contact', verbose_name=' contactDbId')

    def __str__(self):
        return '{}'.format(self.pk)
