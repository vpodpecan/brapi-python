# These models were are auto-generated by using a modified Django's inspectdb script
# The only required manual change (as of 21.july 2017) is to add related_name attribute to the class Pedigree
# Like this:
# germplasmDbId = models.ForeignKey('Germplasm', related_name='pedigreeObject')
# parent1Id = models.ForeignKey('Germplasm', related_name='pedigreeChild1')
# parent2Id = models.ForeignKey('Germplasm', related_name='pedigreeChild2')

from __future__ import unicode_literals

from django.db import models


class Contact(models.Model):
    cropDbId = models.ForeignKey('Crop')
    contactDbId = models.TextField(primary_key=True)
    name = models.TextField(blank=True)
    email = models.TextField(blank=True)
    type = models.TextField(blank=True)
    orcid = models.TextField(blank=True)
    instituteName = models.TextField(blank=True)


class Crop(models.Model):
    cropDbId = models.TextField(primary_key=True)
    commonName = models.TextField()


class Donor(models.Model):
    cropDbId = models.ForeignKey('Crop')
    germplasmDbId = models.ForeignKey('Germplasm')
    donorAccessionNumber = models.TextField(blank=True)
    donorInstituteCode = models.TextField(blank=True)
    donorGermplasmPUI = models.TextField(blank=True)


class Germplasm(models.Model):
    cropDbId = models.ForeignKey('Crop')
    germplasmDbId = models.TextField(primary_key=True)
    germplasmPUI = models.TextField(blank=True)
    germplasmName = models.TextField()
    defaultDisplayName = models.TextField()
    accessionNumber = models.TextField(blank=True)
    pedigree = models.TextField(blank=True)
    seedSource = models.TextField(blank=True)
    synonyms = models.TextField(blank=True)
    instituteCode = models.TextField()
    instituteName = models.TextField(blank=True)
    biologicalStatusOfAccessionCode = models.TextField(blank=True)
    countryOfOriginCode = models.TextField(blank=True)
    typeOfGermplasmStorageCode = models.TextField(blank=True)
    genus = models.TextField(blank=True)
    species = models.TextField(blank=True)
    speciesAuthority = models.TextField(blank=True)
    subtaxa = models.TextField(blank=True)
    subtaxaAuthority = models.TextField(blank=True)
    acquisitionDate = models.TextField(blank=True)


class GermplasmAttribute(models.Model):
    cropDbId = models.ForeignKey('Crop')
    attributeCategoryDbId = models.ForeignKey('GermplasmAttributeCategory')
    attributeDbId = models.TextField(unique=True)
    code = models.TextField(blank=True)
    uri = models.TextField(blank=True)
    name = models.TextField()
    description = models.TextField(blank=True)
    datatype = models.TextField(blank=True)
    values = models.TextField(blank=True)  # This field type is a guess.


class GermplasmAttributeCategory(models.Model):
    cropDbId = models.ForeignKey('Crop')
    attributeCategoryDbId = models.TextField(unique=True)
    attributeCategoryName = models.TextField(blank=True)


class GermplasmAttributeValue(models.Model):
    cropDbId = models.ForeignKey('Crop')
    germplasmDbId = models.ForeignKey('Germplasm')
    attributeDbId = models.ForeignKey('GermplasmAttribute')
    determinedDate = models.TextField(blank=True)
    value = models.TextField()


class Location(models.Model):
    cropDbId = models.ForeignKey('Crop')
    locationDbId = models.TextField(primary_key=True)
    type = models.TextField(blank=True)
    name = models.TextField(blank=True)
    abbreviation = models.TextField(blank=True)
    countryCode = models.TextField(blank=True)
    countryName = models.TextField(blank=True)
    latitude = models.TextField(blank=True)  # This field type is a guess.
    longitude = models.TextField(blank=True)  # This field type is a guess.
    altitude = models.TextField(blank=True)  # This field type is a guess.
    instituteName = models.TextField(blank=True)
    instituteAddress = models.TextField(blank=True)


class LocationAdditionalInfo(models.Model):
    cropDbId = models.ForeignKey('Crop')
    locationDbId = models.ForeignKey('Location')
    key = models.TextField()
    value = models.TextField()


class Map(models.Model):
    cropDbId = models.ForeignKey('Crop')
    mapDbId = models.TextField(primary_key=True)


class Marker(models.Model):
    cropDbId = models.ForeignKey('Crop')
    markerDbId = models.TextField(primary_key=True)
    defaultDisplayName = models.TextField(blank=True)
    type = models.TextField(blank=True)
    synonyms = models.TextField(blank=True)
    refAlt = models.TextField(blank=True)
    analysisMethods = models.TextField(blank=True)


class Markerprofile(models.Model):
    cropDbId = models.ForeignKey('Crop')
    markerProfileDbId = models.TextField(primary_key=True)


class Method(models.Model):
    cropDbId = models.ForeignKey('Crop')
    methodDbId = models.TextField(primary_key=True)


class Observation(models.Model):
    cropDbId = models.ForeignKey('Crop')
    observationUnitDbId = models.ForeignKey('ObservationUnit')
    observationVariableDbId = models.ForeignKey('ObservationVariable')
    observationTimeStamp = models.TextField(blank=True)
    observationDbId = models.TextField(primary_key=True)
    seasonDbId = models.ForeignKey('Season')
    collector = models.TextField(blank=True)
    value = models.TextField(blank=True)


class ObservationUnit(models.Model):
    cropDbId = models.ForeignKey('Crop')
    studyDbId = models.ForeignKey('Study')
    germplasmDbId = models.ForeignKey('Germplasm')
    observationUnitDbId = models.TextField(unique=True)
    name = models.TextField()
    observationUnitLevel = models.TextField(blank=True)
    observationUnitLevels = models.TextField(blank=True)
    entryNumber = models.TextField(blank=True)
    entryType = models.TextField(blank=True)
    plotNumber = models.TextField(blank=True)
    blockNumber = models.TextField(blank=True)
    plantNumber = models.TextField(blank=True)
    x = models.TextField(blank=True)
    y = models.TextField(blank=True)
    replicate = models.TextField(blank=True)


class ObservationUnitTreatment(models.Model):
    cropDbId = models.ForeignKey('Crop')
    observationUnitDbId = models.ForeignKey('ObservationUnit')
    factor = models.TextField()
    modality = models.TextField()


class ObservationUnitXref(models.Model):
    cropDbId = models.ForeignKey('Crop')
    observationUnitDbId = models.ForeignKey('ObservationUnit')
    source = models.TextField()
    id = models.TextField(primary_key=True)


class ObservationVariable(models.Model):
    cropDbId = models.ForeignKey('Crop')
    ontologyDbId = models.ForeignKey('Ontology')
    observationVariableDbId = models.TextField(unique=True)
    traitDbId = models.ForeignKey('Trait')
    methodDbId = models.ForeignKey('Method')
    scaleDbId = models.ForeignKey('Scale')


class Ontology(models.Model):
    cropDbId = models.ForeignKey('Crop')
    ontologyDbId = models.TextField(primary_key=True)


class Pedigree(models.Model):
    cropDbId = models.ForeignKey('Crop')
    germplasmDbId = models.ForeignKey('Germplasm', related_name='pedigreeObject')
    pedigree = models.TextField(primary_key=True)
    parent1Id = models.ForeignKey('Germplasm', related_name='pedigreeChild1')
    parent2Id = models.ForeignKey('Germplasm', related_name='pedigreeChild2')


class Program(models.Model):
    cropDbId = models.ForeignKey('Crop')
    programDbId = models.TextField(primary_key=True)
    name = models.TextField()
    abbreviation = models.TextField(blank=True)
    objective = models.TextField(blank=True)
    leadPerson = models.TextField(blank=True)


class Sample(models.Model):
    cropDbId = models.ForeignKey('Crop')
    sampleDbId = models.TextField(primary_key=True)


class Scale(models.Model):
    cropDbId = models.ForeignKey('Crop')
    scaleDbId = models.TextField(primary_key=True)


class Season(models.Model):
    cropDbId = models.ForeignKey('Crop')
    seasonDbId = models.TextField(primary_key=True)
    year = models.TextField(blank=True)
    season = models.TextField(blank=True)


class Study(models.Model):
    cropDbId = models.ForeignKey('Crop')
    trialDbId = models.ForeignKey('Trial')
    locationDbId = models.ForeignKey('Location')
    studyType = models.ForeignKey('StudyType')
    studyDbId = models.TextField(primary_key=True)
    name = models.TextField()
    description = models.TextField(blank=True)
    startDate = models.TextField(blank=True)
    endDate = models.TextField(blank=True)
    active = models.NullBooleanField()
    license = models.TextField(blank=True)
    lastUpdateVersion = models.TextField(blank=True)
    lastUpdateTimestamp = models.TextField(blank=True)


class StudyAdditionalInfo(models.Model):
    cropDbId = models.ForeignKey('Crop')
    studyDbId = models.ForeignKey('Study')
    key = models.TextField()
    value = models.TextField()


class StudyContact(models.Model):
    cropDbId = models.ForeignKey('Crop')
    studyDbId = models.ForeignKey('Study')
    contactDbId = models.ForeignKey('Contact')


class StudyDataLink(models.Model):
    cropDbId = models.ForeignKey('Crop')
    studyDbId = models.ForeignKey('Study')
    name = models.TextField(blank=True)
    type = models.TextField(blank=True)
    url = models.TextField()


class StudySeason(models.Model):
    cropDbId = models.ForeignKey('Crop')
    studyDbId = models.ForeignKey('Study')
    seasonDbId = models.ForeignKey('Season')


class StudyType(models.Model):
    cropDbId = models.ForeignKey('Crop')
    name = models.TextField(unique=True)
    description = models.TextField(blank=True)


class TaxonXref(models.Model):
    cropDbId = models.ForeignKey('Crop')
    taxonDbId = models.TextField(unique=True)
    source = models.TextField()
    rank = models.TextField(blank=True)


class TaxonXrefGermplasm(models.Model):
    cropDbId = models.ForeignKey('Crop')
    taxonDbId = models.ForeignKey('TaxonXref')
    germplasmDbId = models.ForeignKey('Germplasm')


class Trait(models.Model):
    cropDbId = models.ForeignKey('Crop')
    traitDbId = models.TextField(primary_key=True)


class Trial(models.Model):
    cropDbId = models.ForeignKey('Crop')
    programDbId = models.ForeignKey('Program')
    trialDbId = models.TextField(primary_key=True)
    name = models.TextField()
    startDate = models.TextField(blank=True)
    endDate = models.TextField(blank=True)
    active = models.NullBooleanField()
    datasetAuthorshipLicence = models.TextField(blank=True)
    datasetAuthorshipDatasetPUI = models.TextField(blank=True)


class TrialAdditionalInfo(models.Model):
    cropDbId = models.ForeignKey('Crop')
    trialDbId = models.ForeignKey('Trial')
    key = models.TextField()
    value = models.TextField()


class TrialContact(models.Model):
    cropDbId = models.ForeignKey('Crop')
    trialDbId = models.ForeignKey('Trial')
    contactDbId = models.ForeignKey('Contact')
